Copyright 2020 OffTheBricks - https://github.com/offthebricks/LOEN

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.



Value Types

The details below in this document outline how value types are encoded
in LOEN encoding. The common element is that each value is prefixed
by a specific symbol, which enabled the interpreted to know the values
variable type. The prefix is normally immediatly adjacent to the value,
but may legally be separated from the value by whitespace.


Boolean Types

Boolean types are prefixed by an equals (=), and are denoted by the
first letter only of their type.

true: =t
false: =f


Null Type

The null type, like the boolean types, is prefixed by an equals (=),
and is denoted by a single letter.

null: =n


String Types

Strings are prefixed in all cases by a colon (:), and is double quote
contained if any characters are not one of the standard UTF-8
alphanumeric character types. Double quotes contained within a string
must be escaped with a backslash (\); all other characters are legal
within the double quoted string, and do not require escaping.
** Exception ** The string "null" must always be contained within double
quotes, so as not to be confused with JSON {"str":null}

tree: :tree
big tree: :"big tree"
big "scary" tree: :"big \"scary\" tree"

Empty strings are denoted simply by their prefix, as they have no content.

: :


Numeric Types

Integers and floats both positive and negative are prefixed by their
corresponding sign. Positive values use a plus (+), while negtives use
a minus or dash (-).

12: +12
-12: -12
12.34: +12.34
-12.34: -12.34


Object Types

Objects are prefixed by an opening curly brace ({), and must additionally
be closed/terminated by a closing curly brace (}).

{}: {}


Array Types

Arrays are prefixed by an opening square brace ([), and must additionally
be closed/terminated by a closing square brace (]).

[]: []


Condensed Array Types

Condensed arrays are prefixed by a less than (<), and must additionally
be closed/terminated by a closing greater than (>).

<>: <>

All immediate children to a condensed array are always arrays. There must
always be at least two arrays as the first array child represents the
properties of the source objects, of which values have been converted to
arrays.

[{}]: <[][]>
[{},{},{}]: <[][][][]>
